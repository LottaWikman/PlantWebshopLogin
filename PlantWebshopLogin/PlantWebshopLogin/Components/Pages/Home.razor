@page "/"
@using Blazored.LocalStorage
@using PlantWebshopLogin.Models
@using PlantWebshopLogin.Components.RazorComponents
@inject NavigationManager navigationManager
@inject ShoppingCartService shoppingCartService
@inject ProductService productService
@inject ILocalStorageService localStorage
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider stateProvider
@inject UserService userService

@rendermode InteractiveServer

<PageTitle>Planty Corner</PageTitle>

<div class="profile">
    <img src="/bootstrap/Images/background_monstera_leaves.jpg" alt="Monstera leaves" class="picture">
    <div class="heading-container">
        <h1 class="headline">Planty Corner</h1>
        <h5 class="underline">your plantshop online</h5>
    </div>
</div>
<br />
@if (showCurrency == "$")
{
    <button class="currency-btn" @onclick="ToEUR">€</button>
}
else
{
    <button class="currency-btn" @onclick="ToUSD">$</button>
}
<div class="product-grid">
	@foreach (var product in productService.GetProducts())
	{
		<PlantWebshopLogin.Components.RazorComponents.ProductCard 
        Product="product" 
        showCurrency="@showCurrency" 
        exchangeRate="@exchangeRate" 
        isLoggedIn="@isLoggedIn"
        user="@user"/>
	}
</div>

<br />
<br />

<footer>
	<section class="footer-layout">
		<p class="footer-text">About us</p>
		<p class="footer-text">Contact</p>
		<p class="footer-text">FAQ</p>
	</section>
</footer>

@code{
    bool isLoggedIn;

    ApplicationUser? user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await stateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                isLoggedIn = true;

                var stateUser = await userManager.GetUserAsync(authState.User);
                user = await userService.GetUser(stateUser);
            }
            else
            {
                isLoggedIn = false;
            }
            StateHasChanged();
        }
    }

    public void GoTo(int id)
    {
        navigationManager.NavigateTo("/product/" + id);
    }

    public string showCurrency = "$";

    public double exchangeRate = 1;
    string fromCurrency = "USD";
    string toCurrency = "EUR";

    private string APIkey = "hCBPMVWwhCMsewSnaugGFg==YVJmq69pQ8BhcIle";

    public async Task ToEUR()
    {
        try
        {
            fromCurrency = "USD";
            toCurrency = "EUR";
            using var client = new HttpClient();
            client.DefaultRequestHeaders.Add("X-Api-Key", APIkey);
            var response = await client.GetFromJsonAsync<ResponseType>
            ($"https://api.api-ninjas.com/v1/exchangerate?pair={fromCurrency}_{toCurrency}");
            exchangeRate = response.exchange_rate;
            showCurrency = "€";
        }
        catch
        {
            exchangeRate = 000000.00;
        }
    }

    public async Task ToUSD()
    {
        try
        {
            exchangeRate = 1;
            showCurrency = "$";
        }
        catch
        {
            exchangeRate = 000000.00;
        }
    }

    public class ResponseType
    {
        public string currency_pair { get; set; }
        public double exchange_rate { get; set; }
    }


}

