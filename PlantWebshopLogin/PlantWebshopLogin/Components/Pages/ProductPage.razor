@page "/product/{id:int}"

@using Blazored.LocalStorage
@using PlantWebshopLogin.Models
@using PlantWebshopLogin.Components.Pages
@inject NavigationManager navigationManager
@inject ShoppingCartService shoppingCartService
@inject UserShoppingCartService userShoppingCartService
@inject ProductService productService
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider stateProvider
@inject UserManager<ApplicationUser> userManager
@inject UserService userService

@rendermode InteractiveServer


<div class="container">
    <div class="@(Product.Quantity == 0 ? "out-of-stock-product-card" : "product-card")">
        <div class="product-image">
            @if (Product.ImageUrl != null)
            {
                <img src="@Product.ImageUrl" alt="Image of @Product.Name" />
            }
            else
            {
                <img src="/bootstrap/images/noPicture.jpg" alt="Image of @Product.Name" />
            }

        </div>
        <div class="product-details">
            <h2 class="product-title">@Product.Name</h2>
            @if (Product.OldPrice is not null)
            {
                <h4 class="product-price"><s class="old-price">$@Product.OldPrice</s>     $@Product.Price</h4>
            }
            else
            {
                <h4 class="product-price no-old-price">$@Product.Price</h4>
            }
            @if (Product.Quantity == 0)
            {
                <button class="add-to-cart-btn">Out of stock</button>
            }
            else
            {
                @if (isLoggedIn is true)
                {
                    <button class="add-to-cart-btn" @onclick="() => AddToUserShoppingCart(Product)">Add to USER Cart</button>
                }
                else if (isLoggedIn is false)
                {
                    <button class="add-to-cart-btn" @onclick="() => AddToShoppingCart(Product)">Add to non-USER Cart</button>
                }
            }
            <section class="description">@Product.Description</section>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public int Id { get; set; }

    public Product Product { get; set; } = new Product();
    ApplicationUser? user;
    bool isLoggedIn = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {   
        if (firstRender)
        {
            var authState = await stateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                isLoggedIn = true;

                var stateUser = await userManager.GetUserAsync(authState.User);
                user = await userService.GetUser(stateUser);
            }

            Product = productService.GetProduct(Id);
            StateHasChanged();
        }
    }


    public async Task AddToShoppingCart(Product product)
    {
        await shoppingCartService.AddToCart(product);
    }

    public async Task AddToUserShoppingCart(Product product)
    {
        await userShoppingCartService.AddToCart(product, user);
    }




}
