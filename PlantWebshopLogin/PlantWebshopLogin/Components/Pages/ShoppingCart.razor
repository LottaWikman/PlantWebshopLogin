@page "/shoppingcart"

@using Blazored.LocalStorage
@using PlantWebshopLogin.Models
@using PlantWebshopLogin.Client.Models
@using Microsoft.AspNetCore.Authorization

@inject ShoppingCartService shoppingCartService
@inject UserShoppingCartService userShoppingCartService
@inject CustomerService customerService
@inject UserService userService
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider stateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@rendermode InteractiveServer

<h3>ShoppingCart (not logged in)</h3>

@if (shoppingCart.Count() == 0)
{
    <p>Your shoppingcart is empty.</p>
}
else
{
    <ul>
    @foreach (var product in shoppingCart)
    {
        <li>@product.Name</li>
    }
    </ul>
}
<button @onclick="ClearShoppingCart">Clear shopping cart</button>
<br />
<br />

<AuthorizeView>
    <Authorized>
        <h3>User's shopping cart</h3>

        @if (userShoppingCart.Count() == 0)
        {
            <p>Your shoppingcart is empty.</p>
        }
        else
        {
            <ul>
                @foreach (var product in userShoppingCart)
                {
                    <li>@product.Name</li>
                }
            </ul>
        }
        <button @onclick="ClearUserShoppingCart">Clear user's shopping cart</button>

        <br/>
        <br/>

        <form @onsubmit="Submit">
            <label>
                Firstname:
                <input type="text" @bind-value="customer.Firstname" />
            </label>
            <br />
            <label>
                Lastname:
                <input type="text" @bind-value="customer.Lastname" />
            </label>
            <br />
            <label>
                Address:
                <input type="text" @bind-value="customer.Address" />
            </label>
            <br />
            <label>
                City:
                <input type="text" @bind-value="customer.City" />
            </label>
            <br />
            <button type="submit">Submit</button>
        </form>
    </Authorized>
    <NotAuthorized>
        <p>Login to continue purchase.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    List<Product> shoppingCart = new List<Product>();
    List<UserProduct> userShoppingCart = new List<UserProduct>();
    List<ClientProduct> clientProducts = new List<ClientProduct>();
    Customer customer = new Customer();
    ClientCustomer clientCustomer = new ClientCustomer();

    ApplicationUser? user;
    AuthenticationState? authState;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //Är någon inloggad? Ja/Nej
            authState = await stateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity.IsAuthenticated)
            {
                //genom authState kan vi hämta ApplicationUser
                var stateUser = await userManager.GetUserAsync(authState.User);

                //Använder vår service för att hämta info om usern
                user = await userService.GetUser(stateUser);

                userShoppingCart = await userShoppingCartService.GetShoppingCart(user);
            }
            shoppingCart = await shoppingCartService.GetShoppingCart();   
            StateHasChanged();
        }
    }

    public async Task ClearShoppingCart()
    {
        await shoppingCartService.EmptyCart();
        StateHasChanged();
        shoppingCart = await shoppingCartService.GetShoppingCart();
    }

    public async Task ClearUserShoppingCart()
    {
        authState = await stateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity.IsAuthenticated)
        {
            var stateUser = await userManager.GetUserAsync(authState.User);
            user = await userService.GetUser(stateUser);
            await userShoppingCartService.EmptyCart(user);
            StateHasChanged();
            userShoppingCart = await userShoppingCartService.GetShoppingCart(user);
        }
    }

    public async void Submit()
    {
        customerService.CreateCustomer(customer);
        await userShoppingCartService.EmptyCart(user);
        userShoppingCartService.DecreaseQuantity(userShoppingCart);

        foreach (UserProduct userProduct in userShoppingCart)
        {
            ClientProduct clientProduct;
            clientProduct = userShoppingCartService.ConvertToClientProduct(userProduct);
            clientProducts.Add(clientProduct);
        }

        clientCustomer = customerService.ConvertToClientCustomer(customer);
        string key = clientCustomer.Id.ToString();

        //sparar objekten i sessionstorage:
        await sessionStorage.SetItemAsync(user.Id, clientProducts);
        await sessionStorage.SetItemAsync(key, clientCustomer);

        navigationManager.NavigateTo("/orderconfirmation");
    }

}
